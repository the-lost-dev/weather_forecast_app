// Mocks generated by Mockito 5.3.2 from annotations
// in weather_forecast_app/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_forecast_app/src/common/repositories/app_database_manager.dart'
    as _i9;
import 'package:weather_forecast_app/src/config/config_exports.dart' as _i8;
import 'package:weather_forecast_app/src/features/weather/data/api/current_weather/response/weather_response.dart'
    as _i2;
import 'package:weather_forecast_app/src/features/weather/data/api/forecast_weather/response/forecast_weather_response.dart'
    as _i3;
import 'package:weather_forecast_app/src/features/weather/data/api/weather_api_manager.dart'
    as _i5;
import 'package:weather_forecast_app/src/features/weather/data/repository/weather_repository_impl.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWeatherResponse_0 extends _i1.SmartFake
    implements _i2.WeatherResponse {
  _FakeWeatherResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeForecastWeatherResponse_1 extends _i1.SmartFake
    implements _i3.ForecastWeatherResponse {
  _FakeForecastWeatherResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherApiManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherApiManager extends _i1.Mock implements _i5.WeatherApiManager {
  MockWeatherApiManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.WeatherResponse> getCurrentWeatherData(
    String? city,
    String? unit,
    String? apiKey,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentWeatherData,
          [
            city,
            unit,
            apiKey,
          ],
        ),
        returnValue:
            _i6.Future<_i2.WeatherResponse>.value(_FakeWeatherResponse_0(
          this,
          Invocation.method(
            #getCurrentWeatherData,
            [
              city,
              unit,
              apiKey,
            ],
          ),
        )),
      ) as _i6.Future<_i2.WeatherResponse>);
  @override
  _i6.Future<_i3.ForecastWeatherResponse> getForecastWeatherData(
    String? city,
    String? unit,
    String? apiKey,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForecastWeatherData,
          [
            city,
            unit,
            apiKey,
          ],
        ),
        returnValue: _i6.Future<_i3.ForecastWeatherResponse>.value(
            _FakeForecastWeatherResponse_1(
          this,
          Invocation.method(
            #getForecastWeatherData,
            [
              city,
              unit,
              apiKey,
            ],
          ),
        )),
      ) as _i6.Future<_i3.ForecastWeatherResponse>);
}

/// A class which mocks [WeatherRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepositoryImpl extends _i1.Mock
    implements _i7.WeatherRepositoryImpl {
  MockWeatherRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.Either<_i8.Failure, _i2.WeatherResponse>>
      getCurrentWeatherData({required String? city}) => (super.noSuchMethod(
            Invocation.method(
              #getCurrentWeatherData,
              [],
              {#city: city},
            ),
            returnValue:
                _i6.Future<_i4.Either<_i8.Failure, _i2.WeatherResponse>>.value(
                    _FakeEither_2<_i8.Failure, _i2.WeatherResponse>(
              this,
              Invocation.method(
                #getCurrentWeatherData,
                [],
                {#city: city},
              ),
            )),
          ) as _i6.Future<_i4.Either<_i8.Failure, _i2.WeatherResponse>>);
  @override
  _i6.Future<_i4.Either<_i8.Failure, _i3.ForecastWeatherResponse>>
      getForecastWeatherData({required String? city}) => (super.noSuchMethod(
            Invocation.method(
              #getForecastWeatherData,
              [],
              {#city: city},
            ),
            returnValue: _i6.Future<
                    _i4.Either<_i8.Failure, _i3.ForecastWeatherResponse>>.value(
                _FakeEither_2<_i8.Failure, _i3.ForecastWeatherResponse>(
              this,
              Invocation.method(
                #getForecastWeatherData,
                [],
                {#city: city},
              ),
            )),
          ) as _i6
              .Future<_i4.Either<_i8.Failure, _i3.ForecastWeatherResponse>>);
}

/// A class which mocks [AppDatabaseManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDatabaseManager extends _i1.Mock
    implements _i9.AppDatabaseManager {
  MockAppDatabaseManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void saveFavoriteCity(List<String>? favoriteCities) => super.noSuchMethod(
        Invocation.method(
          #saveFavoriteCity,
          [favoriteCities],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void clearSavedCities() => super.noSuchMethod(
        Invocation.method(
          #clearSavedCities,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
